// Code generated by MockGen. DO NOT EDIT.
// Source: dish.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "quickeat/pkg/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDishService is a mock of DishService interface.
type MockDishService struct {
	ctrl     *gomock.Controller
	recorder *MockDishServiceMockRecorder
}

// MockDishServiceMockRecorder is the mock recorder for MockDishService.
type MockDishServiceMockRecorder struct {
	mock *MockDishService
}

// NewMockDishService creates a new mock instance.
func NewMockDishService(ctrl *gomock.Controller) *MockDishService {
	mock := &MockDishService{ctrl: ctrl}
	mock.recorder = &MockDishServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDishService) EXPECT() *MockDishServiceMockRecorder {
	return m.recorder
}

// CreateDish mocks base method.
func (m *MockDishService) CreateDish(ctx context.Context, DishId int, NewDishCategory string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDish", ctx, DishId, NewDishCategory)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDish indicates an expected call of CreateDish.
func (mr *MockDishServiceMockRecorder) CreateDish(ctx, DishId, NewDishCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDish", reflect.TypeOf((*MockDishService)(nil).CreateDish), ctx, DishId, NewDishCategory)
}

// DeleteDishById mocks base method.
func (m *MockDishService) DeleteDishById(ctx context.Context, DishId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDishById", ctx, DishId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDishById indicates an expected call of DeleteDishById.
func (mr *MockDishServiceMockRecorder) DeleteDishById(ctx, DishId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDishById", reflect.TypeOf((*MockDishService)(nil).DeleteDishById), ctx, DishId)
}

// DeleteDishByName mocks base method.
func (m *MockDishService) DeleteDishByName(ctx context.Context, DishName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDishByName", ctx, DishName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDishByName indicates an expected call of DeleteDishByName.
func (mr *MockDishServiceMockRecorder) DeleteDishByName(ctx, DishName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDishByName", reflect.TypeOf((*MockDishService)(nil).DeleteDishByName), ctx, DishName)
}

// Get mocks base method.
func (m *MockDishService) Get(ctx context.Context, id int) (*entity.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDishServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDishService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockDishService) GetAll(ctx context.Context) ([]*entity.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entity.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDishServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDishService)(nil).GetAll), ctx)
}

// GetByCategory mocks base method.
func (m *MockDishService) GetByCategory(ctx context.Context, categoryID int) ([]*entity.Dish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", ctx, categoryID)
	ret0, _ := ret[0].([]*entity.Dish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockDishServiceMockRecorder) GetByCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockDishService)(nil).GetByCategory), ctx, categoryID)
}

// UpdateDishCategory mocks base method.
func (m *MockDishService) UpdateDishCategory(ctx context.Context, DishId int, NewDishCategory string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDishCategory", ctx, DishId, NewDishCategory)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDishCategory indicates an expected call of UpdateDishCategory.
func (mr *MockDishServiceMockRecorder) UpdateDishCategory(ctx, DishId, NewDishCategory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDishCategory", reflect.TypeOf((*MockDishService)(nil).UpdateDishCategory), ctx, DishId, NewDishCategory)
}

// UpdateDishName mocks base method.
func (m *MockDishService) UpdateDishName(ctx context.Context, DishId int, NewDishName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDishName", ctx, DishId, NewDishName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDishName indicates an expected call of UpdateDishName.
func (mr *MockDishServiceMockRecorder) UpdateDishName(ctx, DishId, NewDishName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDishName", reflect.TypeOf((*MockDishService)(nil).UpdateDishName), ctx, DishId, NewDishName)
}

// UpdateDishPrepTime mocks base method.
func (m *MockDishService) UpdateDishPrepTime(ctx context.Context, DishId, NewDishPrepTime int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDishPrepTime", ctx, DishId, NewDishPrepTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDishPrepTime indicates an expected call of UpdateDishPrepTime.
func (mr *MockDishServiceMockRecorder) UpdateDishPrepTime(ctx, DishId, NewDishPrepTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDishPrepTime", reflect.TypeOf((*MockDishService)(nil).UpdateDishPrepTime), ctx, DishId, NewDishPrepTime)
}

// UpdateDishPrice mocks base method.
func (m *MockDishService) UpdateDishPrice(ctx context.Context, DishId, NewDishPrice int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDishPrice", ctx, DishId, NewDishPrice)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDishPrice indicates an expected call of UpdateDishPrice.
func (mr *MockDishServiceMockRecorder) UpdateDishPrice(ctx, DishId, NewDishPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDishPrice", reflect.TypeOf((*MockDishService)(nil).UpdateDishPrice), ctx, DishId, NewDishPrice)
}
